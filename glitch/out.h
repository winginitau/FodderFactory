//
// DO NOT MODIFY THIS FILE
//
// THIS FILE IS AUTOMATICALLY GENERATED IN ITS ENTIRETY
// ANY CHANGES MADE IN THIS FILE WILL BE OVERWRITTEN WITHOUT WARNING
// WHENEVER THE GLITCH IS INVOKED.
//

#ifndef OUT_H_
#define OUT_H_

#define MAX_AST_IDENTIFIER_SIZE 18
#define MAX_AST_LABEL_SIZE 16
#define MAX_AST_ACTION_SIZE 24
#define AST_NODE_COUNT 63
#define MAX_PARAM_COUNT 3

#define XLAT_IDENT_MAP_COUNT 9
#define XLAT_LOOKUP_MAP_COUNT 1
#define XLAT_FUNC_MAP_COUNT 29

#define MAX_INPUT_LINE_SIZE 150
#define MAX_OUTPUT_LINE_SIZE 150

#ifdef ARDUINO
#include <Arduino.h>
#define USE_PROGMEM
#endif

//#define DEBUG

#include "common_config.h"
#include <stdint.h>
#include <string.h>
#include <global_defs.h>
#include <registry.h>
//#include <string_consts.h>

//
// Structs used by the parser 
// 

typedef struct AST_ARRAY {
    uint8_t id;
    uint8_t type;
    const char *label;
    uint8_t action;
    uint8_t parent;
    uint8_t first_child;
    uint8_t next_sibling;
    const char *action_identifier;
} ASTA;

typedef struct AST_NODE {
    uint8_t id;
    uint8_t type;
    char label[MAX_AST_LABEL_SIZE];
    uint8_t action;
    uint8_t parent;
    uint8_t first_child;
    uint8_t next_sibling;
    char action_identifier[MAX_AST_ACTION_SIZE];
} ASTA_Node;

typedef struct XLAT_MAP {
    const char *label;
    uint16_t xlat_id;
} XLATMap;

typedef union {
    int16_t param_int16_t;
    uint16_t param_uint16_t;
    float param_float;
    char* param_char_star;
} ParamUnion;

#define ITCH_ESCAPE_SEQUENCE "^^^"
#define ITCH_ESCAPE_SEQUENCE_SIZE 3

enum {
	FF_ERROR_CAT = 0,
	FF_GENERIC_BLOCK,
	FF_SYSTEM,
	FF_INPUT,
	FF_MONITOR,
	FF_SCHEDULE,
	FF_RULE,
	FF_CONTROLLER,
	FF_OUTPUT,
	LAST_BLOCK_CAT,
};

#ifdef USE_PROGMEM
static const SimpleStringArray block_cat_names [LAST_BLOCK_CAT] PROGMEM = {
#else
static const SimpleStringArray block_cat_names [LAST_BLOCK_CAT] = {
#endif
	"ERROR_CAT",
	"GENERIC",
	"SYSTEM",
	"INPUT",
	"MONITOR",
	"SCHEDULE",
	"RULE",
	"CONROLLER",
	"OUTPUT",
};

enum {
	CMD_ERROR = 0,
	CMD_OUTPUT_OFF,
	CMD_OUTPUT_ON,
	CMD_RESET_MIN_MAX,
	LAST_COMMAND,
};

#ifdef USE_PROGMEM
static const SimpleStringArray command_strings [LAST_COMMAND] PROGMEM = {
#else
static const SimpleStringArray command_strings [LAST_COMMAND] = {
#endif
	"CMD_ERROR",
	"CMD_OUTPUT_OFF",
	"CMD_OUTPUT_ON",
	"CMD_RESET_MIN_MAX",
};

enum {
	SYS_CONFIG_ERROR = 0,
	SYS_CONFIG_TYPE,
	SYS_CONFIG_DISPLAY_NAME,
	SYS_CONFIG_DESCRIPTION,
	SYS_CONFIG_LANGUAGE,
	SYS_CONFIG_TEMP_SCALE,
	SYS_CONFIG_WEEK_START,
	LAST_SYS_CONFIG,
};

#ifdef USE_PROGMEM
static const SimpleStringArray sys_config_keys [LAST_SYS_CONFIG] PROGMEM = {
#else
static const SimpleStringArray sys_config_keys [LAST_SYS_CONFIG] = {
#endif
	"SYS_CONFIG_ERROR",
	"type",
	"display_name",
	"description",
	"language",
	"temp_scale",
	"week_start",
};

enum {
	IN_CONFIG_ERROR = 0,
	IN_CONFIG_TYPE,
	IN_CONFIG_DISPLAY_NAME,
	IN_CONFIG_DESCRIPTION,
	IN_CONFIG_INTERFACE,
	IN_CONFIG_IF_NUM,
	IN_CONFIG_LOG_RATE,
	IN_CONFIG_DATA_UNITS,
	LAST_IN_CONFIG,
};

#ifdef USE_PROGMEM
static const SimpleStringArray in_config_keys [LAST_IN_CONFIG] PROGMEM = {
#else
static const SimpleStringArray in_config_keys [LAST_IN_CONFIG] = {
#endif
	"IN_CONFIG_ERROR",
	"type",
	"display_name",
	"description",
	"interface",
	"if_num",
	"log_rate",
	"data_units",
};

enum {
	MON_CONFIG_ERROR = 0,
	MON_CONFIG_TYPE,
	MON_CONFIG_DISPLAY_NAME,
	MON_CONFIG_DESCRIPTION,
	MON_CONFIG_INPUT1,
	MON_CONFIG_INPUT2,
	MON_CONFIG_INPUT3,
	MON_CONFIG_INPUT4,
	MON_CONFIG_ACT_VAL,
	MON_CONFIG_DEACT_VAL,
	LAST_MON_CONFIG,
};

#ifdef USE_PROGMEM
static const SimpleStringArray mon_config_keys [LAST_MON_CONFIG] PROGMEM = {
#else
static const SimpleStringArray mon_config_keys [LAST_MON_CONFIG] = {
#endif
	"MON_CONFIG_ERROR",
	"type",
	"display_name",
	"description",
	"input1",
	"input2",
	"input3",
	"input4",
	"act_val",
	"deact_val",
};

enum {
	SCH_CONFIG_ERROR = 0,
	SCH_CONFIG_TYPE,
	SCH_CONFIG_DISPLAY_NAME,
	SCH_CONFIG_DESCRIPTION,
	SCH_CONFIG_DAYS,
	SCH_CONFIG_TIME_START,
	SCH_CONFIG_TIME_END,
	SCH_CONFIG_TIME_DURATION,
	SCH_CONFIG_TIME_REPEAT,
	LAST_SCH_CONFIG,
};

#ifdef USE_PROGMEM
static const SimpleStringArray sch_config_keys [LAST_SCH_CONFIG] PROGMEM = {
#else
static const SimpleStringArray sch_config_keys [LAST_SCH_CONFIG] = {
#endif
	"SCH_CONFIG_ERROR",
	"type",
	"display_name",
	"description",
	"days",
	"time_start",
	"time_end",
	"time_duration",
	"time_repeat",
};

enum {
	RL_CONFIG_ERROR = 0,
	RL_CONFIG_TYPE,
	RL_CONFIG_DISPLAY_NAME,
	RL_CONFIG_DESCRIPTION,
	RL_CONFIG_PARAM1,
	RL_CONFIG_PARAM2,
	RL_CONFIG_PARAM3,
	RL_CONFIG_PARAM_NOT,
	LAST_RL_CONFIG,
};

#ifdef USE_PROGMEM
static const SimpleStringArray rl_config_keys [LAST_RL_CONFIG] PROGMEM = {
#else
static const SimpleStringArray rl_config_keys [LAST_RL_CONFIG] = {
#endif
	"RL_CONFIG_ERROR",
	"type",
	"display_name",
	"description",
	"param1",
	"param2",
	"param3",
	"param_not",
};

enum {
	CON_CONFIG_ERROR = 0,
	CON_CONFIG_TYPE,
	CON_CONFIG_DISPLAY_NAME,
	CON_CONFIG_DESCRIPTION,
	CON_CONFIG_RULE,
	CON_CONFIG_OUTPUT,
	CON_CONFIG_ACT_CMD,
	CON_CONFIG_DEACT_CMD,
	LAST_CON_CONFIG,
};

#ifdef USE_PROGMEM
static const SimpleStringArray con_config_keys [LAST_CON_CONFIG] PROGMEM = {
#else
static const SimpleStringArray con_config_keys [LAST_CON_CONFIG] = {
#endif
	"CON_CONFIG_ERROR",
	"type",
	"display_name",
	"description",
	"rule",
	"output",
	"act_cmd",
	"deact_cmd",
};

enum {
	OUT_CONFIG_ERROR = 0,
	OUT_CONFIG_TYPE,
	OUT_CONFIG_DISPLAY_NAME,
	OUT_CONFIG_DESCRIPTION,
	OUT_CONFIG_INTERFACE,
	OUT_CONFIG_IF_NUM,
	LAST_OUT_CONFIG,
};

#ifdef USE_PROGMEM
static const SimpleStringArray out_config_keys [LAST_OUT_CONFIG] PROGMEM = {
#else
static const SimpleStringArray out_config_keys [LAST_OUT_CONFIG] = {
#endif
	"OUT_CONFIG_ERROR",
	"type",
	"display_name",
	"description",
	"interface",
	"if_num",
};

void ShowBlocks(void);
void ShowSystem(void);
void ShowBlockByLabel(char* BLOCK_LABEL);
void ShowBlockByID(int16_t param1_int);
void SendCommandToBlockLabel(char* BLOCK_LABEL, uint16_t COMMAND_STRING);
void SendCommandToBlockID(int16_t param1_int, uint16_t COMMAND_STRING);
void ShowTime(void);
void SetTime(char* param1_time);
void ShowDate(void);
void SetDate(char* param1_date);
void ConfigReset(void);
void ConfigLoad(void);
void ConfigLoadBinary(void);
void ConfigLoadINI(void);
void ConfigSave(void);
void ConfigSaveBinary(void);
void ConfigBlockSystem(char* param1_string, uint16_t SYS_CONFIG, char* param2_string);
void ConfigBlockInput(char* param1_string, uint16_t IN_CONFIG, char* param2_string);
void ConfigBlockMonitor(char* param1_string, uint16_t MON_CONFIG, char* param2_string);
void ConfigBlockSchedule(char* param1_string, uint16_t SCH_CONFIG, char* param2_string);
void ConfigBlockRule(char* param1_string, uint16_t RL_CONFIG, char* param2_string);
void ConfigBlockController(char* param1_string, uint16_t CON_CONFIG, char* param2_string);
void ConfigBlockOutput(char* param1_string, uint16_t OUT_CONFIG, char* param2_string);
void InitSetupAll(void);
void InitValidateAll(void);
void InitDisableAll(void);
void SystemReboot(void);
void BlockIDCmdOn(int16_t param1_int);
void BlockIDCmdOff(int16_t param1_int);

// id, type, label, actionable, parent, first_child, next_sibling, action_id
#ifdef USE_PROGMEM
static const ASTA asta [63] PROGMEM = {
#else
static const ASTA asta [63] = {
#endif
	1, 1, "SHOW", 0, 0, 2, 6, "",
	2, 1, "BLOCKS", 1, 1, 0, 3, "SHOW_BLOCKS",
	3, 1, "SYSTEM", 1, 1, 0, 4, "SHOW_SYSTEM",
	4, 3, "BLOCK_LABEL", 1, 1, 0, 5, "SHOW_BLOCK_LABEL",
	5, 6, "param-integer", 1, 1, 0, 0, "SHOW_BLOCK_ID",
	6, 1, "MESSAGE", 0, 0, 7, 12, "",
	7, 1, "COMMAND", 0, 6, 8, 0, "",
	8, 3, "BLOCK_LABEL", 0, 7, 9, 10, "",
	9, 2, "command_strings", 1, 8, 0, 0, "COMMAND_BLOCK_LABEL",
	10, 6, "param-integer", 0, 7, 11, 0, "",
	11, 2, "command_strings", 1, 10, 0, 0, "COMMAND_BLOCK_ID",
	12, 1, "TIME", 1, 0, 13, 15, "SHOW_TIME",
	13, 1, "SET", 0, 12, 14, 0, "",
	14, 5, "param-time", 1, 13, 0, 0, "SET_TIME",
	15, 1, "DATE", 1, 0, 16, 18, "SHOW_DATE",
	16, 1, "SET", 0, 15, 17, 0, "",
	17, 4, "param-date", 1, 16, 0, 0, "SET_DATE",
	18, 1, "CONFIG", 0, 0, 19, 53, "",
	19, 1, "RESET", 1, 18, 0, 20, "CONFIG_RESET",
	20, 1, "LOAD", 1, 18, 21, 23, "CONFIG_LOAD",
	21, 1, "BINARY", 1, 20, 0, 22, "CONFIG_LOAD_BINARY",
	22, 1, "INI", 1, 20, 0, 0, "CONFIG_LOAD_INI",
	23, 1, "SAVE", 1, 18, 24, 25, "CONFIG_SAVE",
	24, 1, "BINARY", 1, 23, 0, 0, "CONFIG_SAVE_BINARY",
	25, 1, "system", 0, 18, 26, 29, "",
	26, 13, "param-string", 0, 25, 27, 0, "",
	27, 2, "sys_config_keys", 0, 26, 28, 0, "",
	28, 13, "param-string", 1, 27, 0, 0, "CONFIG_BLOCK_SYSTEM",
	29, 1, "input", 0, 18, 30, 33, "",
	30, 13, "param-string", 0, 29, 31, 0, "",
	31, 2, "in_config_keys", 0, 30, 32, 0, "",
	32, 13, "param-string", 1, 31, 0, 0, "CONFIG_BLOCK_INPUT",
	33, 1, "monitor", 0, 18, 34, 37, "",
	34, 13, "param-string", 0, 33, 35, 0, "",
	35, 2, "mon_config_keys", 0, 34, 36, 0, "",
	36, 13, "param-string", 1, 35, 0, 0, "CONFIG_BLOCK_MONITOR",
	37, 1, "schedule", 0, 18, 38, 41, "",
	38, 13, "param-string", 0, 37, 39, 0, "",
	39, 2, "sch_config_keys", 0, 38, 40, 0, "",
	40, 13, "param-string", 1, 39, 0, 0, "CONFIG_BLOCK_SCHEDULE",
	41, 1, "rule", 0, 18, 42, 45, "",
	42, 13, "param-string", 0, 41, 43, 0, "",
	43, 2, "rl_config_keys", 0, 42, 44, 0, "",
	44, 13, "param-string", 1, 43, 0, 0, "CONFIG_BLOCK_RULE",
	45, 1, "controller", 0, 18, 46, 49, "",
	46, 13, "param-string", 0, 45, 47, 0, "",
	47, 2, "con_config_keys", 0, 46, 48, 0, "",
	48, 13, "param-string", 1, 47, 0, 0, "CONFIG_BLOCK_CONTROLLER",
	49, 1, "output", 0, 18, 50, 0, "",
	50, 13, "param-string", 0, 49, 51, 0, "",
	51, 2, "out_config_keys", 0, 50, 52, 0, "",
	52, 13, "param-string", 1, 51, 0, 0, "CONFIG_BLOCK_OUTPUT",
	53, 1, "INIT", 0, 0, 54, 60, "",
	54, 1, "SETUP", 0, 53, 55, 56, "",
	55, 1, "ALL", 1, 54, 0, 0, "INIT_SETUP_ALL",
	56, 1, "VALIDATE", 0, 53, 57, 58, "",
	57, 1, "ALL", 1, 56, 0, 0, "INIT_VALIDATE_ALL",
	58, 1, "DISABLE", 0, 53, 59, 0, "",
	59, 1, "ALL", 1, 58, 0, 0, "INIT_DISABLE_ALL",
	60, 1, "REBOOT", 1, 0, 0, 61, "REBOOT",
	61, 6, "param-integer", 0, 0, 62, 0, "",
	62, 1, "ON", 1, 61, 0, 63, "BLOCK_ID_CMD_ON",
	63, 1, "OFF", 1, 61, 0, 0, "BLOCK_ID_CMD_OFF",
};

#ifdef USE_PROGMEM
static const XLATMap ident_map [9] PROGMEM = {
#else
static const XLATMap ident_map [9] = {
#endif
	"block_cat_names", 0,
	"command_strings", 1,
	"sys_config_keys", 2,
	"in_config_keys", 3,
	"mon_config_keys", 4,
	"sch_config_keys", 5,
	"rl_config_keys", 6,
	"con_config_keys", 7,
	"out_config_keys", 8,
};

#ifdef USE_PROGMEM
static const XLATMap lookup_map [1] PROGMEM = {
#else
static const XLATMap lookup_map [1] = {
#endif
	"BLOCK_LABEL", 0,
};

#ifdef USE_PROGMEM
static const XLATMap func_map [29] PROGMEM = {
#else
static const XLATMap func_map [29] = {
#endif
	"SHOW_BLOCKS", 0,
	"SHOW_SYSTEM", 1,
	"SHOW_BLOCK_LABEL", 2,
	"SHOW_BLOCK_ID", 3,
	"COMMAND_BLOCK_LABEL", 4,
	"COMMAND_BLOCK_ID", 5,
	"SHOW_TIME", 6,
	"SET_TIME", 7,
	"SHOW_DATE", 8,
	"SET_DATE", 9,
	"CONFIG_RESET", 10,
	"CONFIG_LOAD", 11,
	"CONFIG_LOAD_BINARY", 12,
	"CONFIG_LOAD_INI", 13,
	"CONFIG_SAVE", 14,
	"CONFIG_SAVE_BINARY", 15,
	"CONFIG_BLOCK_SYSTEM", 16,
	"CONFIG_BLOCK_INPUT", 17,
	"CONFIG_BLOCK_MONITOR", 18,
	"CONFIG_BLOCK_SCHEDULE", 19,
	"CONFIG_BLOCK_RULE", 20,
	"CONFIG_BLOCK_CONTROLLER", 21,
	"CONFIG_BLOCK_OUTPUT", 22,
	"INIT_SETUP_ALL", 23,
	"INIT_VALIDATE_ALL", 24,
	"INIT_DISABLE_ALL", 25,
	"REBOOT", 26,
	"BLOCK_ID_CMD_ON", 27,
	"BLOCK_ID_CMD_OFF", 28,
};

uint16_t LookupIdentMap (char* key);
uint16_t LookupLookupMap (char* key);
uint16_t LookupFuncMap (char* key);
uint16_t LookupIdentifierMembers(uint16_t ident_xlat, char* lookup_string);
uint8_t LookupLookupMembers(uint16_t ident_xlat, char* lookup_string);
uint8_t LookupBlockLabel(char* lookup_string);
uint16_t CallFunction(uint8_t func_xlat, ParamUnion params[]);

#endif // ockLabel(lookup_string) != 0) return 1;


