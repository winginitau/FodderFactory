//
// DO NOT MODIFY THIS FILE
//
// THIS FILE IS AUTOMATICALLY GENERATED IN ITS ENTIRETY
// ANY CHANGES MADE IN THIS FILE WILL BE OVERWRITTEN WITHOUT WARNING
// WHENEVER THE GLITCH IS INVOKED.
//

#ifndef OUT_H_
#define OUT_H_

#define MAX_ENUM_STRING_ARRAY_STRING_SIZE 18
#define MAX_IDENTIFIER_LABEL_SIZE 24
#define MAX_AST_LABEL_SIZE 16
#define MAX_AST_ACTION_SIZE 24
#define AST_NODE_COUNT 140
#define MAX_PARAM_COUNT 2

#define XLAT_IDENT_MAP_COUNT 2
#define XLAT_LOOKUP_MAP_COUNT 1
#define XLAT_FUNC_MAP_COUNT 26

#define MAX_INPUT_LINE_SIZE 80
#define MAX_OUTPUT_LINE_SIZE 150

#define MAX_BUFFER_SIZE MAX_OUTPUT_LINE_SIZE
#define MAX_BUFFER_LENGTH MAX_OUTPUT_LINE_SIZE

#ifdef ARDUINO
#include <Arduino.h>
#define USE_PROGMEM
#endif

//#define DEBUG

#include "common_config.h"
#include <stdint.h>
#include <string.h>
#include <global_defs.h>
#include <registry.h>
//#include <string_consts.h>

//
// Structs used by the parser 
// 

typedef struct AST_ARRAY {
    uint16_t id;
    int type;
    char label[MAX_AST_LABEL_SIZE];
    bool action;
    uint16_t parent;
    uint16_t first_child;
    uint16_t next_sibling;
    char action_identifier[MAX_AST_ACTION_SIZE];
} ASTA;

typedef struct XLAT_MAP {
	char label[MAX_IDENTIFIER_LABEL_SIZE];
	uint16_t xlat_id;
} XLATMap;

typedef union {
	int16_t param_int16_t;
	uint16_t param_uint16_t;
	float param_float;
	char* param_char_star;
} ParamUnion;

#define ITCH_ESCAPE_SEQUENCE "^^^"
#define ITCH_ESCAPE_SEQUENCE_SIZE 3

enum {
	FF_ERROR_CAT = 0,
	FF_GENERIC_BLOCK,
	FF_SYSTEM,
	FF_INPUT,
	FF_MONITOR,
	FF_SCHEDULE,
	FF_RULE,
	FF_CONTROLLER,
	FF_OUTPUT,
	LAST_BLOCK_CAT,
};

#ifdef USE_PROGMEM
static const SimpleStringArray block_cat_names [LAST_BLOCK_CAT] PROGMEM = {
#else
static const SimpleStringArray block_cat_names [LAST_BLOCK_CAT] = {
#endif
	"ERROR_CAT",
	"GENERIC",
	"SYSTEM",
	"INPUT",
	"MONITOR",
	"SCHEDULE",
	"RULE",
	"CONROLLER",
	"OUTPUT",
};

enum {
	CMD_ERROR = 0,
	CMD_OUTPUT_OFF,
	CMD_OUTPUT_ON,
	CMD_RESET_MIN_MAX,
	LAST_COMMAND,
};

#ifdef USE_PROGMEM
static const SimpleStringArray command_strings [LAST_COMMAND] PROGMEM = {
#else
static const SimpleStringArray command_strings [LAST_COMMAND] = {
#endif
	"CMD_ERROR",
	"CMD_OUTPUT_OFF",
	"CMD_OUTPUT_ON",
	"CMD_RESET_MIN_MAX",
};

void ShowBlocks(void);
void ShowSystem(void);
void ShowBlockByLabel(char* BLOCK_LABEL);
void ShowBlockByID(int16_t param1_int);
void SendCommandToBlockLabel(char* BLOCK_LABEL, uint16_t COMMAND_STRING);
void SendCommandToBlockID(int16_t param1_int, uint16_t COMMAND_STRING);
void ShowTime(void);
void SetTime(char* param1_time);
void ShowDate(void);
void SetDate(char* param1_date);
void ConfigReset(void);
void ConfigLoad(void);
void ConfigLoadBinary(void);
void ConfigLoadINI(void);
void ConfigSave(void);
void ConfigSaveBinary(void);
void ConfigBlockSystem(char* param1_string, char* param2_string);
void ConfigBlockSystem(char* param1_string, char* param2_string);
void ConfigBlockSystem(char* param1_string, char* param2_string);
void ConfigBlockSystem(char* param1_string, char* param2_string);
void ConfigBlockSystem(char* param1_string, char* param2_string);
void ConfigBlockSystem(char* param1_string, char* param2_string);
void ConfigBlockInput(char* param1_string, char* param2_string);
void ConfigBlockInput(char* param1_string, char* param2_string);
void ConfigBlockInput(char* param1_string, char* param2_string);
void ConfigBlockInput(char* param1_string, char* param2_string);
void ConfigBlockInput(char* param1_string, char* param2_string);
void ConfigBlockInput(char* param1_string, char* param2_string);
void ConfigBlockInput(char* param1_string, char* param2_string);
void ConfigBlockMonitor(char* param1_string, char* param2_string);
void ConfigBlockMonitor(char* param1_string, char* param2_string);
void ConfigBlockMonitor(char* param1_string, char* param2_string);
void ConfigBlockMonitor(char* param1_string, char* param2_string);
void ConfigBlockMonitor(char* param1_string, char* param2_string);
void ConfigBlockMonitor(char* param1_string, char* param2_string);
void ConfigBlockMonitor(char* param1_string, char* param2_string);
void ConfigBlockMonitor(char* param1_string, char* param2_string);
void ConfigBlockMonitor(char* param1_string, char* param2_string);
void ConfigBlockSchedule(char* param1_string, char* param2_string);
void ConfigBlockSchedule(char* param1_string, char* param2_string);
void ConfigBlockSchedule(char* param1_string, char* param2_string);
void ConfigBlockSchedule(char* param1_string, char* param2_string);
void ConfigBlockSchedule(char* param1_string, char* param2_string);
void ConfigBlockSchedule(char* param1_string, char* param2_string);
void ConfigBlockSchedule(char* param1_string, char* param2_string);
void ConfigBlockSchedule(char* param1_string, char* param2_string);
void ConfigBlockRule(char* param1_string, char* param2_string);
void ConfigBlockRule(char* param1_string, char* param2_string);
void ConfigBlockRule(char* param1_string, char* param2_string);
void ConfigBlockRule(char* param1_string, char* param2_string);
void ConfigBlockRule(char* param1_string, char* param2_string);
void ConfigBlockRule(char* param1_string, char* param2_string);
void ConfigBlockRule(char* param1_string, char* param2_string);
void ConfigBlockController(char* param1_string, char* param2_string);
void ConfigBlockController(char* param1_string, char* param2_string);
void ConfigBlockController(char* param1_string, char* param2_string);
void ConfigBlockController(char* param1_string, char* param2_string);
void ConfigBlockController(char* param1_string, char* param2_string);
void ConfigBlockController(char* param1_string, char* param2_string);
void ConfigBlockController(char* param1_string, char* param2_string);
void ConfigBlockOutput(char* param1_string, char* param2_string);
void ConfigBlockOutput(char* param1_string, char* param2_string);
void ConfigBlockOutput(char* param1_string, char* param2_string);
void ConfigBlockOutput(char* param1_string, char* param2_string);
void ConfigBlockOutput(char* param1_string, char* param2_string);
void SystemReboot(void);
void BlockIDCmdOn(int16_t param1_int);
void BlockIDCmdOff(int16_t param1_int);

#ifdef USE_PROGMEM
static const ASTA asta [140] PROGMEM = {
#else
static const ASTA asta [140] = {
#endif
	1, 1, "SHOW", 0, 0, 2, 6, "",
	2, 1, "BLOCKS", 1, 1, 0, 3, "SHOW_BLOCKS",
	3, 1, "SYSTEM", 1, 1, 0, 4, "SHOW_SYSTEM",
	4, 3, "BLOCK_LABEL", 1, 1, 0, 5, "SHOW_BLOCK_LABEL",
	5, 6, "param-integer", 1, 1, 0, 0, "SHOW_BLOCK_ID",
	6, 1, "MESSAGE", 0, 0, 7, 12, "",
	7, 1, "COMMAND", 0, 6, 8, 0, "",
	8, 3, "BLOCK_LABEL", 0, 7, 9, 10, "",
	9, 2, "command_strings", 1, 8, 0, 0, "COMMAND_BLOCK_LABEL",
	10, 6, "param-integer", 0, 7, 11, 0, "",
	11, 2, "command_strings", 1, 10, 0, 0, "COMMAND_BLOCK_ID",
	12, 1, "TIME", 1, 0, 13, 15, "SHOW_TIME",
	13, 1, "SET", 0, 12, 14, 0, "",
	14, 5, "param-time", 1, 13, 0, 0, "SET_TIME",
	15, 1, "DATE", 1, 0, 16, 18, "SHOW_DATE",
	16, 1, "SET", 0, 15, 17, 0, "",
	17, 4, "param-date", 1, 16, 0, 0, "SET_DATE",
	18, 1, "CONFIG", 0, 0, 19, 137, "",
	19, 1, "RESET", 1, 18, 0, 20, "CONFIG_RESET",
	20, 1, "LOAD", 1, 18, 21, 23, "CONFIG_LOAD",
	21, 1, "BINARY", 1, 20, 0, 22, "CONFIG_LOAD_BINARY",
	22, 1, "INI", 1, 20, 0, 0, "CONFIG_LOAD_INI",
	23, 1, "SAVE", 1, 18, 24, 25, "CONFIG_SAVE",
	24, 1, "BINARY", 1, 23, 0, 0, "CONFIG_SAVE_BINARY",
	25, 1, "system", 0, 18, 26, 39, "",
	26, 13, "param-string", 0, 25, 27, 0, "",
	27, 1, "type", 0, 26, 28, 29, "",
	28, 13, "param-string", 1, 27, 0, 0, "CONFIG_BLOCK_SYSTEM",
	29, 1, "display_name", 0, 26, 30, 31, "",
	30, 13, "param-string", 1, 29, 0, 0, "CONFIG_BLOCK_SYSTEM",
	31, 1, "description", 0, 26, 32, 33, "",
	32, 13, "param-string", 1, 31, 0, 0, "CONFIG_BLOCK_SYSTEM",
	33, 1, "temp_scale", 0, 26, 34, 35, "",
	34, 13, "param-string", 1, 33, 0, 0, "CONFIG_BLOCK_SYSTEM",
	35, 1, "language", 0, 26, 36, 37, "",
	36, 13, "param-string", 1, 35, 0, 0, "CONFIG_BLOCK_SYSTEM",
	37, 1, "week_start", 0, 26, 38, 0, "",
	38, 13, "param-string", 1, 37, 0, 0, "CONFIG_BLOCK_SYSTEM",
	39, 1, "input", 0, 18, 40, 55, "",
	40, 13, "param-string", 0, 39, 41, 0, "",
	41, 1, "type", 0, 40, 42, 43, "",
	42, 13, "param-string", 1, 41, 0, 0, "CONFIG_BLOCK_INPUT",
	43, 1, "display_name", 0, 40, 44, 45, "",
	44, 13, "param-string", 1, 43, 0, 0, "CONFIG_BLOCK_INPUT",
	45, 1, "description", 0, 40, 46, 47, "",
	46, 13, "param-string", 1, 45, 0, 0, "CONFIG_BLOCK_INPUT",
	47, 1, "interface", 0, 40, 48, 49, "",
	48, 13, "param-string", 1, 47, 0, 0, "CONFIG_BLOCK_INPUT",
	49, 1, "if_num", 0, 40, 50, 51, "",
	50, 13, "param-string", 1, 49, 0, 0, "CONFIG_BLOCK_INPUT",
	51, 1, "log_rate", 0, 40, 52, 53, "",
	52, 13, "param-string", 1, 51, 0, 0, "CONFIG_BLOCK_INPUT",
	53, 1, "data_units", 0, 40, 54, 0, "",
	54, 13, "param-string", 1, 53, 0, 0, "CONFIG_BLOCK_INPUT",
	55, 1, "monitor", 0, 18, 56, 75, "",
	56, 13, "param-string", 0, 55, 57, 0, "",
	57, 1, "type", 0, 56, 58, 59, "",
	58, 13, "param-string", 1, 57, 0, 0, "CONFIG_BLOCK_MONITOR",
	59, 1, "display_name", 0, 56, 60, 61, "",
	60, 13, "param-string", 1, 59, 0, 0, "CONFIG_BLOCK_MONITOR",
	61, 1, "description", 0, 56, 62, 63, "",
	62, 13, "param-string", 1, 61, 0, 0, "CONFIG_BLOCK_MONITOR",
	63, 1, "input1", 0, 56, 64, 65, "",
	64, 13, "param-string", 1, 63, 0, 0, "CONFIG_BLOCK_MONITOR",
	65, 1, "input2", 0, 56, 66, 67, "",
	66, 13, "param-string", 1, 65, 0, 0, "CONFIG_BLOCK_MONITOR",
	67, 1, "input3", 0, 56, 68, 69, "",
	68, 13, "param-string", 1, 67, 0, 0, "CONFIG_BLOCK_MONITOR",
	69, 1, "input4", 0, 56, 70, 71, "",
	70, 13, "param-string", 1, 69, 0, 0, "CONFIG_BLOCK_MONITOR",
	71, 1, "act_val", 0, 56, 72, 73, "",
	72, 13, "param-string", 1, 71, 0, 0, "CONFIG_BLOCK_MONITOR",
	73, 1, "deact_val", 0, 56, 74, 0, "",
	74, 13, "param-string", 1, 73, 0, 0, "CONFIG_BLOCK_MONITOR",
	75, 1, "schedule", 0, 18, 76, 93, "",
	76, 13, "param-string", 0, 75, 77, 0, "",
	77, 1, "type", 0, 76, 78, 79, "",
	78, 13, "param-string", 1, 77, 0, 0, "CONFIG_BLOCK_SCHEDULE",
	79, 1, "display_name", 0, 76, 80, 81, "",
	80, 13, "param-string", 1, 79, 0, 0, "CONFIG_BLOCK_SCHEDULE",
	81, 1, "description", 0, 76, 82, 83, "",
	82, 13, "param-string", 1, 81, 0, 0, "CONFIG_BLOCK_SCHEDULE",
	83, 1, "days", 0, 76, 84, 85, "",
	84, 13, "param-string", 1, 83, 0, 0, "CONFIG_BLOCK_SCHEDULE",
	85, 1, "time_start", 0, 76, 86, 87, "",
	86, 13, "param-string", 1, 85, 0, 0, "CONFIG_BLOCK_SCHEDULE",
	87, 1, "time_end", 0, 76, 88, 89, "",
	88, 13, "param-string", 1, 87, 0, 0, "CONFIG_BLOCK_SCHEDULE",
	89, 1, "time_duration", 0, 76, 90, 91, "",
	90, 13, "param-string", 1, 89, 0, 0, "CONFIG_BLOCK_SCHEDULE",
	91, 1, "time_repeat", 0, 76, 92, 0, "",
	92, 13, "param-string", 1, 91, 0, 0, "CONFIG_BLOCK_SCHEDULE",
	93, 1, "rule", 0, 18, 94, 109, "",
	94, 13, "param-string", 0, 93, 95, 0, "",
	95, 1, "type", 0, 94, 96, 97, "",
	96, 13, "param-string", 1, 95, 0, 0, "CONFIG_BLOCK_RULE",
	97, 1, "display_name", 0, 94, 98, 99, "",
	98, 13, "param-string", 1, 97, 0, 0, "CONFIG_BLOCK_RULE",
	99, 1, "description", 0, 94, 100, 101, "",
	100, 13, "param-string", 1, 99, 0, 0, "CONFIG_BLOCK_RULE",
	101, 1, "param1", 0, 94, 102, 103, "",
	102, 13, "param-string", 1, 101, 0, 0, "CONFIG_BLOCK_RULE",
	103, 1, "param2", 0, 94, 104, 105, "",
	104, 13, "param-string", 1, 103, 0, 0, "CONFIG_BLOCK_RULE",
	105, 1, "param3", 0, 94, 106, 107, "",
	106, 13, "param-string", 1, 105, 0, 0, "CONFIG_BLOCK_RULE",
	107, 1, "param_not", 0, 94, 108, 0, "",
	108, 13, "param-string", 1, 107, 0, 0, "CONFIG_BLOCK_RULE",
	109, 1, "controller", 0, 18, 110, 125, "",
	110, 13, "param-string", 0, 109, 111, 0, "",
	111, 1, "type", 0, 110, 112, 113, "",
	112, 13, "param-string", 1, 111, 0, 0, "CONFIG_BLOCK_CONTROLLER",
	113, 1, "display_name", 0, 110, 114, 115, "",
	114, 13, "param-string", 1, 113, 0, 0, "CONFIG_BLOCK_CONTROLLER",
	115, 1, "description", 0, 110, 116, 117, "",
	116, 13, "param-string", 1, 115, 0, 0, "CONFIG_BLOCK_CONTROLLER",
	117, 1, "rule", 0, 110, 118, 119, "",
	118, 13, "param-string", 1, 117, 0, 0, "CONFIG_BLOCK_CONTROLLER",
	119, 1, "output", 0, 110, 120, 121, "",
	120, 13, "param-string", 1, 119, 0, 0, "CONFIG_BLOCK_CONTROLLER",
	121, 1, "act_cmd", 0, 110, 122, 123, "",
	122, 13, "param-string", 1, 121, 0, 0, "CONFIG_BLOCK_CONTROLLER",
	123, 1, "deact_cmd", 0, 110, 124, 0, "",
	124, 13, "param-string", 1, 123, 0, 0, "CONFIG_BLOCK_CONTROLLER",
	125, 1, "output", 0, 18, 126, 0, "",
	126, 13, "param-string", 0, 125, 127, 0, "",
	127, 1, "type", 0, 126, 128, 129, "",
	128, 13, "param-string", 1, 127, 0, 0, "CONFIG_BLOCK_OUTPUT",
	129, 1, "display_name", 0, 126, 130, 131, "",
	130, 13, "param-string", 1, 129, 0, 0, "CONFIG_BLOCK_OUTPUT",
	131, 1, "description", 0, 126, 132, 133, "",
	132, 13, "param-string", 1, 131, 0, 0, "CONFIG_BLOCK_OUTPUT",
	133, 1, "interface", 0, 126, 134, 135, "",
	134, 13, "param-string", 1, 133, 0, 0, "CONFIG_BLOCK_OUTPUT",
	135, 1, "if_num", 0, 126, 136, 0, "",
	136, 13, "param-string", 1, 135, 0, 0, "CONFIG_BLOCK_OUTPUT",
	137, 1, "REBOOT", 1, 0, 0, 138, "REBOOT",
	138, 6, "param-integer", 0, 0, 139, 0, "",
	139, 1, "ON", 1, 138, 0, 140, "BLOCK_ID_CMD_ON",
	140, 1, "OFF", 1, 138, 0, 0, "BLOCK_ID_CMD_OFF",
};

#ifdef USE_PROGMEM
static const XLATMap ident_map [2] PROGMEM = {
#else
static const XLATMap ident_map [2] = {
#endif
	"block_cat_names", 0,
	"command_strings", 1,
};

#ifdef USE_PROGMEM
static const XLATMap lookup_map [1] PROGMEM = {
#else
static const XLATMap lookup_map [1] = {
#endif
	"BLOCK_LABEL", 0,
};

#ifdef USE_PROGMEM
static const XLATMap func_map [26] PROGMEM = {
#else
static const XLATMap func_map [26] = {
#endif
	"SHOW_BLOCKS", 0,
	"SHOW_SYSTEM", 1,
	"SHOW_BLOCK_LABEL", 2,
	"SHOW_BLOCK_ID", 3,
	"COMMAND_BLOCK_LABEL", 4,
	"COMMAND_BLOCK_ID", 5,
	"SHOW_TIME", 6,
	"SET_TIME", 7,
	"SHOW_DATE", 8,
	"SET_DATE", 9,
	"CONFIG_RESET", 10,
	"CONFIG_LOAD", 11,
	"CONFIG_LOAD_BINARY", 12,
	"CONFIG_LOAD_INI", 13,
	"CONFIG_SAVE", 14,
	"CONFIG_SAVE_BINARY", 15,
	"CONFIG_BLOCK_SYSTEM", 16,
	"CONFIG_BLOCK_INPUT", 17,
	"CONFIG_BLOCK_MONITOR", 18,
	"CONFIG_BLOCK_SCHEDULE", 19,
	"CONFIG_BLOCK_RULE", 20,
	"CONFIG_BLOCK_CONTROLLER", 21,
	"CONFIG_BLOCK_OUTPUT", 22,
	"REBOOT", 23,
	"BLOCK_ID_CMD_ON", 24,
	"BLOCK_ID_CMD_OFF", 25,
};

uint16_t LookupIdentMap (char* key);
uint16_t LookupLookupMap (char* key);
uint16_t LookupFuncMap (char* key);
uint16_t LookupIdentifierMembers(uint16_t ident_xlat, char* lookup_string);
uint8_t LookupLookupMembers(uint16_t ident_xlat, char* lookup_string);
uint8_t LookupBlockLabel(char* lookup_string);
uint16_t CallFunction(uint8_t func_xlat, ParamUnion params[]);

#endif // OUT_H_

