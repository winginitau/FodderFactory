# IOT Device - Configuration and Management Grammar for: 
#	- Device interactive terminal shell
#	- Interactive terminal configurtion parser
#	- Configuration file parser
#	- for the IOT Device Concept (and example config) below.
#
# Copyright 2018 Brendan McLearie
#	- Upon completion to be released under an appropriate GPL/MIT
#	  licence on as part of the FodderFactory project or its
#	  derivations - also Copyright Brendan McLearie and other
#	  contributors.
#	- see https://github.com/winginitau/FodderFactory
#
# IOT Device Concept -> Configurtion and management of "Blocks".
#	Blocks are identified by a <block-label> that is unique 
#	within the local device on which they run. Blocks are 
#	of a category <block-category> which may be one of:
#	
#	- SYSTEM block -> config of the device / platform itself 
#	  (MCU, SOC, Compute Module). Definiton of the SYSTEM block
#	  includes its globally unique <64bit-device-address>, security
#	  keys, language/time/date localisation, capabilities, 
#	  local device name (synonomous to a hostname), and the
#	  X.500(ish) distinguished name representing the hierchical
#	  primary message pathway to the most central hub.    
#	- INTERFACE blocks -> the local HARDWARE specfic PINS, 
#	  SoftwareSerial, UARTS, SPI, I2C etc and their setup / config.
#	  Also local internal and remote serial, socket, stream
#	  MESSAGE interfaces to message busses / MQTT / Cloud IOT etc 
#	  including their setup / authentication / encryption / keepalive etc
#
#	- INPUT blocks -> sensors and input data streams connected 
#	  via a HARDWARE INTERFACE. They accomplish local data
#	  logging and "push" messaging to MONITOR blocks running
#	  internally, locally or on another device / platform over 
#	  a MESSAGE INTERFACE.
#	  INPUT blocks may be of type SHADDOW if the real input stream / 
#	  sensor etc is connected to an interface on another remote 
#	  "down-tree" real device. In this case the SHADDOW block is
#	  only defined for the purpose of holding the config provisioning
#	  information that needs to be pushed down-tree.
#   
# 	- MONITOR blocks -> monitor data received from inputs (local 
#	  INPUTS or INPUTS from elsewhere) for preset conditions, 
#	  thresholds and derivations. MONITORs may monitor INPUTs or 
#	  multiple other MONITOR blocks for derived conditions eg
#	  averages accross two or more other MONITORs or INPUTs.
#	  MONITOR blocks may extract tokenised data from INPUT block
#	  streams - eg looking for a StateOfCharge value extracted
#	  from a battery monitor data set that includes other info.  
# 
#	- SCHEDULE blocks -> activate on start-duration-repeat, 
#	  start-stop, and one-shot time/date events configured for 
#	  specific days of the week or ALL and with a resolution 
#	  down to 1 sec. 
# 
#	- RULE blocks -> bolean logic activation blocks responding 
#	  to connected MONIOR and SCHEDULE blocks. eg AND, OR, XOR, NOT,
#	  AND-but-NOT, OR-but-NOT, TRUE-but-(NOT AND NOT), etc
#	  Final set TBD with possible substitution of a new type - RULESET
#	  blocks which would imlement a variable rule base - think firewall
#	  rule set evaluted line by line with fall through and catch all.   
#
#	- CONTROLLER blocks -> boolean responders attached to a RULE 
#	  block that contain the the logic / sequence / commands to
#	  activate, deactivate or set/send values on OUTPUT blocks 
#	  and to confirm that the action was sucessful. Eg sending a 
#	  CMD_ON message to a water pump OUTPUT (local or remote) 
#	  and then checking a MONITOR to confirm a current draw 
#	  within specification; raising a warning or error 
#	  message on failure. CONTROLLER blocks send messages to 
#	  OUTPUT blocks either locally or remotely over a MESSAGE INTERFACE 
#
#	- OUTPUT blocks -> listen to a MESSAGE INTERFACE for commands
#	  sent to them from an associated CONTROLLER block (either local
#	  or remote). The OUTPUT block controls the real device (eg actuators,
#	  relays, PWM recivers, etc) connected locally over a HARDWARE INTERFACE.       
#
#  This is a comment line
// This is an alternative comment line
// 
// Comment tokens # or // may appear anywhere on a line
// All characters after a comment token are ignored
// Therfore it is safe to use reserved keywords and
// the escape sequence (see below) within comments.
//
// The entire grammar is NOT case sesnitive.
// UPPER, lower and mixed case herein are provided only to aid
// readability and denote:
//	- KEYWORDS
//	- <identifiers>
//	- <TYPES> eg <INT> <FLOAT>
//	- String Literals
//
!
!  Lines beginning with exclamation marks "!" are:
!	- Configuration section breaks (equiv to CTRL-Z or EXIT in terminal mode)
! 	- Denote the end of sub-section of configuration statements
!     and ruturns parsing to the enclosing scope
!   - In a config file read, if not closing a subsection 
!     (ie parse state is already in outermost global scope) they
!	  it is ignored and treated like a comment token.
!
!  Reading and parsing of configurtion statements starts when:
!	- the system boots and sucessfully reads from the 
!	  default config file "config.txt" from:
!		- the root of an attached SD card if AVR
!		- the path of the executable on unix (for now)
!		- TODO: configure make install for /usr/local/ or /etc/
!	- from a terminal when a user connected to a serial terminal 
!	  issues the command: CONFIGURE TERMINAL. See command summary. 
!
!  Reading and parsing of configuration statements ends when:
!	- if reading a config file <EOF> is encountered
!	- if reading from the terminal, CTRL-Z or the statement EXIT
!	  is encountered while in the top global configuration scope.
!
!  If CTRL-Z, EXIT or ! are encountred while in a section or
!  subsection scope, then the parsing context changes to the
!  enclosing parent scope.
!  
// To support the same stream (eg a serial port) being used 
//	as both the inter-device message and or debug stream and
//	TERMINAL/CONFIG mode over the same stream (eg a
//	serial port on an MCU), the escape sequence ^^^<EOL> is 
//	used to invoke an interactive TERMINAL mode.   
//
//	A future enhancement will provide ssh key authentication 
//	following the ^^^ sequence before TERMINAL mode will be 
//	activated. TERMINAL mode "^^^" will have an inactivity timeout and an 
//	expotentially increasing re-listen time between authentication failure 
//	attempts to prevent the ^^^ being used as a DOS attack.
//
//	The squence of 3x + chars should be avoided to prevent
//	inadvertant escpaping within streams carried over radio
//	modems that support the AT command set. (Unlikley on an 
//	IP connected device as the stream will be encapsulated (eg ppp),
//  however possible for radio links between a parent hub and 
//  radio serial-only connected MCUs.
//
// Reading config from a terminal or from a file are synonyous:
//	- the config sytax is the same
//	- except that automatic machine reading of a config file 
//	  (for example on boot) implies entry into CONFIGURE mode and invokes 
//	  the config parser without needing an explicit issue CONFIGURE command.    
//
//
#############################################################################
// TERMINAL MODE COMMANDS
#############################################################################

# SHOW BLOCKS					// List all blocks on device with their label and integer ID 
# SHOW <block-category>         // List all blocks within a category with their label and integer ID
# SHOW <block-label>			// Show settings and current values for block
# SHOW <block-id>               // Show the details of the block with ID <block-id> 
# SHOW SYSTEM					// dislay system block settings

# MUTE MESSAGES ON				// stop displaying event and debug messages to this terminal
# MUTE MESSAGES OFF				// start displaying.....

# MONITOR <block-label>			// Add block to the monitor pool
# MONITOR <block-category> <INT>	// Add block to the monitor pool
# MONITOR STOP <block-label>			// Remove block from the monitor pool
# MONITOR STOP <block-category> <INT>	// Remove block from the monitor pool
# MONITOR STOP ALL						// Remove all blocks from the monitor pool
# MONITOR START					// Show all activity from and to monitored blocks. <any key> to exit.

# CLEAR <block-label>					// Clear block's local datalog
# CLEAR <block-category> <INT>			// Clear block's local datalog

# MESSAGE COMMAND <block-category> <INT> <command>			// Send command message to output block
# MESSAGE COMMAND <block-label> <command>

# MESSAGE DATA <block-label> INT <INT>              // Simulate input block sending integer data
# MESSAGE DATA <block-category> <INT> INT <INT>     // Simulate input block sending integer data
# MESSAGE DATA <block-label> FLOAT <FLOAT>          // Simulate input block sending float data
# MESSAGE DATA <block-category> <INT> FLOAT <FLOAT>	// Simulate input block sending float data

# DEBUG LEVEL <INT>					// 1 - 10 (lower is more verbose)
# DEBUG ON							// Turn debug messages on or off system wide
# DEBUG OFF							// to all configured message interfaces
# DEBUG TERMINAL ON					// Send debug messages to this terminal 
# DEBUG TERMINAL OFF                // Stop sending debug messages to this terminal 

# CLOCK					// Show the time
# CLOCK SET <hh:mm:ss>	// Set the time
# DATE					// Show the date
# DATE SET <yyyy-mm-dd>	// Set the date

# CONFIGURE CLEAR BLOCKS		// drop all block config except SYSTEM
# CONFIGURE CLEAR ALL			// drop all config
# CONFIGURE TERMINAL			// read configurtion statements from the terminal
# CONFIGURE FILE				// read the default file into the running config
# CONFIGURE FILE filename		// read a specified file into the running config

# EXIT							// close configuration section, move to enclosing scope
								// Also ! and CTRL-Z for same purpose
								// EXIT in termal mode (non config) implies LOGOUT 

# WRITE					// writes running config to default file "config.txt"
# WRITE INIT			// write empty init config to the default config "config.txt"
# WRITE filename		// write running config to a specific filename

						// Init start-up behavior: If config.txt cannot be found or
						//  if no SYSTEM section is present (in order to define a terminal)
						//  the system will attempt to start terminal interfaces at 9600 N81
						// 	on well known serial ports. For Adruino - "Serial". On mega
						//  Serrial, Serial1, Serial2 Serial3. On UNIX systems
						//  /dev/ttyACM0 /dev/ttyS0, /dev/ttyUSB0 and on 
						//  tcp ports 23, 6001, 8001
						// If a SYSTEM section is found, but it does not specify a
						//  TERMINAL section then no terminals will be started as this
						//  may be intended behavior - eg if access to the config file is
						//  is provided by the operating system. 

# COPY filename filename  // copy contents of one config file to another

# DISABLE <block-label>			// enable and disable blocks from processing
# DISABLE <block-category> <INT>	
# ENABLE <block-label>
# ENABLE <block-category> <INT>

# DELETE <block-label>			// delete block from running config
# DELETE <block-category> <INT>

# LOGOUT   								// disconnect this terminal

# RENAME <block-label> new-block-label	// only possible within block types and avoiding duplicates names

# REBOOT

# NO		// *** undecided - per cisco IOS model, negate a statement

##########################################################################
// EXAMPLE CONFIG FILE (or statements entered in Terminal Mode following
// CONFIGURE TERMINAL
##########################################################################
!
!
SYSTEM
 CNAME mcu1
 DNAME mcu1.localhub1.foddercontrol.headwaters.segment1.core 
 ADDRESS 10:22:34:46:58:6A:7C:8E
 DISPLAY MCU 1
 DESCRIPTION MCU 1 on Fodder Box 1
 LANGUAGE English
 TEMPERATURE celsius
 WEEKSTART sunday
 TYPE MCU				// <MCU/SBC/HOST/CLOUD> 
 FAMILY AVR				// <AVR/RPI/UNIX/AWS/AZURE>
 HARDWARE ATmega2560	// Board Identifier (for firmware flashing)
 MODULES
  MONITOR				// Allow monitor blocks to run on this device
  SCHEDULE				// Allow schedule blocks to run on this device
  RULE					// Allow rule blocks to run on this device
  CONTROLLER			// Alllow Controller blocks to run on this device
  BROKER				// Run a local message broker 
   LISTEN INTERNAL ON			// Creates virtual internal message interface "INTERNAL"
   LISTEN INTERFACE SERIAL0		// for messages coming from upstream
   SEND INTERFACE SERIAL0		// where to send messages received internally
   SEND ALL						// Send all messages up the tree
   #SEND DATA					// Only send data messages up the tree
   LOGLOCAL ON					// keep a local log - defult is "events.txt"
  !
  TERMINAL TERM0		// TERMINAL <identifier> (listen for ^^^ sequence on this) 
   INTERFACE SERIAL0 	// listen for ^^^ sequence on this interface and start a shell if received
  !
  #TERMINAL TERM1
  # INTERFACE SOCKET0
  #!	 
 !  
 DEBUG LEVEL 4
 DEBUG ON
 DEBUG INTERFACE SERIAL0 
 CLOCK				
  TYPE RTC_DS1307		// <rtc_<type>/system/ntp/message>	 
  PORT SPI				// rtc source - <> for system / address for ntp / 
 !						// "message" will periodically request time synch on the up-tree serial interface   
!
!
#################################################
# INTERFACES
#################################################
! 
INTERFACE ONEWIRE0		// INTERFACE <identifter>
 TYPE ONEWIRE			// TYPE <LOCAL_INTERNAL/ONEWIRE/UART_DEVICE/ARDUINO_SERIAL/USB/DIG_PIN/ANALOG_PIN/TCP>
  PORT 6				// The digital pin in this case
  DEVICES 3				// How many onewire devices on this interface
  						// Interface identifiers ONEWIRE0_0 ... ONEWIRE0_2 created
 ! 
 DISPLAY OneWire 0		// Friendly display name for UIs
 DESCRIPTION OneWire Bus 0 Supporting Plugs 1 - 4		// for UI tooltips etc
# PURPOSE SENSOR_BI		// <SENSOR_IN/SENSOR_BI/UPSTREAM_MESSAGE/DOWNSTREAM_MESSAGE/
 ENABLE 
!
INTERFACE ONEWIRE1		// INTERFACE <identifter>
 TYPE ONEWIRE			// TYPE <ONEWIRE/UART/SOFTWARE_SERIAL/USB/DIG_PIN/ANALOG_PIN>
  PORT 7				// The digital pin in this case
  DEVICES 2				// How many onewire devices on this interface
 ! 
 DISPLAY OneWire 1		// Friendly display name for UIs
 DESCRIPTION OneWire Bus 1 Supporting Plugs 5 and 6
 ENABLE 
!
# INTERFACE SERIAL0		// config example for linux based system (eg RPI)
#  TYPE USB
#   PORT /dev/ttyS0
#   SPEED 57600
#   DATA 8
#   STOP 1
#   PARITY NONE	
#   FLOW crtscts			// <cxonxoff/cdtrdsr/ccrtscts>
#	FLAGS clocal, echo=0 
#	#				// TODO: build out other terminos flags
#  !
#  DISPLAY Radio Modem
#  DESCRIPTION RFD900 Radio Modem to up-tree hub
#  DISABLE
!
!
# INTERFACE SOCKET0		// config example for TCP Socket on linux based system (eg RPI)
#  TYPE TCP
#   ADDRESS 127.0.0.1	// accpect connections on this address (all if not specified)
#	PORT 23				// assuming a telnetd is not configured for this port
#  !
#  DISPLAY Terminal Interface
#  DESCRIPTION Terminal Interface on Port 23
#  DISABLE
!
!
INTERFACE SERIAL0			// INTERFACE <identifier>
 TYPE ARDUINO_SERIAL
  PORT Serial				// arduino software serial module	
  SPEED 9600
 !
 DISPLAY Upstream
 DESCRIPTION USB Serial Connection to Upstream Local Hub
 ENABLE
!
INTERFACE SERIAL1
 TYPE ARDUINO_SERIAL
  PORT Serial1				// arduino software serial module	
  SPEED 57600
 !
 DISPLAY Radio Modem
 DESCRIPTION Direct Radio Modem Serial Connection - not used
 DISABLE
!
INTERFACE SERIAL2
 TYPE ARDUINO_SERIAL
  PORT Serial2				// arduino software serial module	
  SPEED 19200
 !
 DISPLAY Not In Use
 DESCRIPTION Not In Use
 DISABLE
!
INTERFACE SERIAL3
 TYPE ARDUINO_SERIAL
  PORT Serial3				// arduino software serial module	
  SPEED 19200
 !
 DISPLAY BMV-700
 DESCRIPTION Serial Connection via Logic Level Converter to Victron BMV-700
 ENABLE
!
INTERFACE DIGITAL0			// INTERFACE <identifier>
 TYPE DIG_PIN
  PORT 22
 !
 DISPLAY Relay 0
 DESCRIPTION Relay Actuator for Grow Lights	
 ENABLE
!
INTERFACE DIGITAL1
 TYPE DIG_PIN
  PORT 24
 !
 DISPLAY Relay 1
 DESCRIPTION Relay Actuator for Water Heater	
 ENABLE
!
INTERFACE DIGITAL2
 TYPE DIG_PIN
  PORT 26
 !
 DISPLAY Relay 2
 DESCRIPTION Relay Actuator for Fresh Air Fan	
 ENABLE
!
INTERFACE DIGITAL3
 TYPE DIG_PIN
  PORT 28
 !
 DISPLAY Relay 3
 DESCRIPTION Relay Actuator for Circulation Fan	
 ENABLE
!
INTERFACE DIGITAL4
 TYPE DIG_PIN
  PORT 30
 !
 DISPLAY Relay 4
 DESCRIPTION Relay Actuator for Exhaust Fan	
 ENABLE
!
INTERFACE DIGITAL5
 TYPE DIG_PIN
  PORT 32
 !
 DISPLAY Relay 5
 DESCRIPTION Spare Relay Actuator
 DISABLE	
!
INTERFACE DIGITAL6
 TYPE DIG_PIN
  PORT 34
 !
 DISPLAY Relay 6
 DESCRIPTION Relay Actuator Sprinklers Top	
 ENABLE
!
INTERFACE DIGITAL7
 TYPE DIG_PIN
  PORT 36
 !
 DISPLAY Relay 0
 DESCRIPTION Relay Actuator for Sprinklers Bottom	
 ENABLE
!
INTERFACE DIGITAL_DOOR0
 TYPE DIG_PIN
  #PORT xx
 !
 DISPLAY Door 0
 DESCRIPTION Door Switch Interface 0	
 DISABLE
!
INTERFACE DIGITAL_DOOR1
 TYPE DIG_PIN
  #PORT xx
 !
 DISPLAY Door 1
 DESCRIPTION Door Switch Interface 1	
 DISABLE
!
#################################################
# INPUTS
#################################################
!
INPUT IN_INSIDE_TOP_TEMP			// <block-category> <identifier>
 TYPE IN_ONEWIRE					// Software driver identifier
 DISPLAY Inside Top
 DESCRIPTION Dallas sensor inside the top of the fodder factory
 HARDWARE INTERFACE ONEWIRE0_1		// enumerated from base ONWIRE0 bus interface
 READRATE 00:02:00
 MESSAGE RATE 00:02:00
 MESSAGE INTERFACE INTERNAL			// Internal if BROKER module loaded. Could send direct to SERIAL0
 DATA UNITS celsius
 DATA TYPE float
 ENABLE
!
INPUT IN_INSIDE_BOTTOM_TEMP
 TYPE IN_ONEWIRE
 DISPLAY Inside Bot
 DESCRIPTION Dallas sensor inside the bottom of the fodder factory
 HARDWARE INTERFACE ONEWIRE0_2
 READRATE 00:02:00
 MESSAGE RATE 00:02:00
 MESSAGE INTERFACE INTERNAL
 DATA UNITS Celsius
 DATA TYPE float
 ENABLE
! 
INPUT IN_OUTSIDE_TEMP
 TYPE IN_ONEWIRE
 DISPLAY Outside
 DESCRIPTION Dallas sensor for outside air temprature
 HARDWARE INTERFACE ONEWIRE1_0
 READRATE 00:02:00
 MESSAGE RATE 00:02:00
 MESSAGE INTERFACE INTERNAL
 DATA UNITS Celsius
 DATA TYPE float
 ENABLE
!
INPUT IN_WATER_TEMP
 TYPE IN_ONEWIRE
 DISPLAY Water
 DESCRIPTION Dallas sensor in the header tank
 HARDWARE INTERFACE ONEWIRE0_0
 READRATE 00:02:00
 MESSAGE RATE 00:02:00
 MESSAGE INTERFACE INTERNAL
 DATA UNITS Celsius
 DATA TYPE float
 ENABLE
!
INPUT IN_CABINET_TEMP
 TYPE IN_ONEWIRE
 DISPLAY Aux Temp 1
 DESCRIPTION Dallas sensor
 HARDWARE INTERFACE ONEWIRE0_3
 READRATE 00:02:00
 MESSAGE RATE 00:02:00
 MESSAGE INTERFACE INTERNAL
 DATA UNITS Celsius
 DATA TYPE float
 ENABLE
! 
INPUT IN_LONGRUN_TEMP
 TYPE IN_ONEWIRE
 DISPLAY Aux Temp 1
 DESCRIPTION Dallas sensor
 # HARDWARE INTERFACE ONEWIREx_x
 READRATE 00:02:00
 MESSAGE RATE 00:02:00
 MESSAGE INTERFACE INTERNAL
 DATA UNITS celsius
 DATA TYPE float
 DISABLE						// mostly defined but currently disabled
!
INPUT IN_LOADING_DOOR_SWITCH
 TYPE IN_DIGITAL
 DISPLAY Loading Door
 DESCRIPTION Reed switch on loading end door
 HARDWARE INTERFACE DIGITAL_DOOR0
 READRATE CONTINUOUS				// as opposed to READRATE <hh:mm:ss> 
 MESSAGE RATE ON_CHANGE				// as opposed to MESSAGE RATE <hh:mm:ss>
 MESSAGE INTERFACE INTERNAL
 DATA UNITS ONOFF
 DATA TYPE boolean
 DISABLE
!
#################################################
# Monitors
#################################################
!
MONITOR MON_INSIDE_TOP_TOO_COLD		// MONIOTR <identifier>
 TYPE MON_CONDITION_LOW
 DISPLAY Inside Top Too Cold
 DESCRIPTION
 DATA TYPE float  					// <float/int/boolean>
 INPUT1 IN_INSIDE_TOP_TEMP
 ACTIVATE 20.00
 DEACTIVATE 24.00
 ENABLE
!
MONITOR MON_INSIDE_TOP_TOO_HOT
 TYPE MON_CONDITION_HIGH
 DISPLAY Inside Top Too Hot
 DESCRIPTION 
 DATA TYPE float
 INPUT1 IN_INSIDE_TOP_TEMP
 ACTIVATE 24.00
 DEACTIVATE 20.00
 ENABLE
!
MONITOR MON_INSIDE_BOTTOM_TOO_COLD
 TYPE MON_CONDITION_LOW
 DISPLAY Inside Bottom Too Cold
 DESCRIPTION  
 DATA TYPE float
 INPUT1 IN_INSIDE_BOTTOM_TEMP
 ACTIVATE 20.00
 DEACTIVATE 24.00
 ENABLE
!
MONITOR MON_INSIDE_BOTTOM_TOO_HOT
 TYPE MON_CONDITION_HIGH
 DISPLAY Inside Bottom Too Hot
 DESCRIPTION 
 DATA TYPE float
 INPUT1 IN_INSIDE_BOTTOM_TEMP
 ACTIVATE 24.00
 DEACTIVATE 20.00
 ENABLE
!
MONITOR MON_INSIDE_AVERAGE_TOO_COLD
 TYPE MON_AVERAGE_CONDITION_LOW
 DISPLAY Average Inside Too Cold
 DESCRIPTION  
 DATA TYPE float
 INPUT1 IN_INSIDE_BOTTOM_TEMP
 INPUT2 IN_INSIDE_TOP_TEMP				// derived block - has more than 1 input
 ACTIVATE 20.00
 DEACTIVATE 24.00
 ENABLE
!
MONITOR MON_INSIDE_AVERAGE_TOO_HOT
 TYPE MON_AVERAGE_CONDITION_HIGH
 DISPLAY Average Inside Too Hot
 DESCRIPTION  
 DATA TYPE float
 INPUT1 IN_INSIDE_BOTTOM_TEMP
 INPUT2 IN_INSIDE_TOP_TEMP				// derived block - has more than 1 input
 ACTIVATE 24.00
 DEACTIVATE 20.00
 ENABLE
!
MONITOR MON_WATER_TOO_HOT
 TYPE MON_CONDITION_HIGH
 DISPLAY Water too hot
 DESCRIPTION Water Inside the Header tank is too hot
 DATA TYPE float
 INPUT1 IN_WATER_TEMP
 ACTIVATE 23.00
 DEACTIVATE 21.00
 ENABLE
!
MONITOR MON_WATER_TOO_COLD
 TYPE MON_CONDITION_LOW
 DISPLAY Water too cold
 DESCRIPTION 
 DATA TYPE float
 INPUT1 IN_WATER_TEMP
 ACTIVATE 21.00
 DEACTIVATE 23.00
 ENABLE
!
MONITOR MON_OUTSIDE_HOT
 TYPE MON_CONDITION_HIGH
 DISPLAY Outside Hot
 DESCRIPTION Outside Temprature Above Set Point
 DATA TYPE float
 INPUT1 IN_OUTSIDE_TEMP
 ACTIVATE 23.00
 DEACTIVATE 21.00
 ENABLE
!
MONITOR MON_OUTSIDE_COLD
 TYPE MON_CONDITION_LOW
 DISPLAY Outside Cold
 DESCRIPTION Outside Temprature Below Set Point
 DATA TYPE float
 INPUT1 IN_OUTSIDE_TEMP
 ACTIVATE 21.00
 DEACTIVATE 23.00
 ENABLE
!
MONITOR MON_LOAD_DOOR_OPEN
 TYPE MON_TRIGGER
 DISPLAY Loading End Door Open
 DESCRIPTION  
 DATA TYPE boolean
 INPUT1 IN_LOADING_DOOR_SWITCH
 ACTIVATE HIGH
 DEACTIVATE LOW
 DISABLE							// this one is disabled
! 
#################################################
# SCHEDULES
#################################################
schedule1 = SCH_EXCLUDE_WATER_HEAT_BY_DAY
schedule2 = SCH_RUN_LIGHTS_AT_NIGHT
schedule3 = SCH_RESET_MIN_MAX_COUNTERS
schedule4 = SCH_WATERING_TOP_SCHEDULE
schedule5 = SCH_WATERING_BOTTOM_SCHEDULE
#schedule6 = SCH_TEST1
#schedule7 = SCH_TEST2
#schedule8 = SCH_TEST3
#schedule9 = SCH_TEST4
#schedule10 = SCH_TEST5
#schedule11 = SCH_TEST6
!
SCHEDULE SCH_EXCLUDE_WATER_HEAT_BY_DAY
 TYPE SCH_START_STOP
 DISPLAY Exclude Water Heat During Day
 DESCRIPTION 
 # ALL, MON, TUE, WED, THU, FRI, SAT, SUN
 DAYS ALL
 TIME START 09:00:00
 TIME END 18:00:00
!
SCHEDULE SCH_RUN_LIGHTS_AT_NIGHT
 TYPE SCH_START_STOP
 DISPLAY Run Lights at Night
 DESCRIPTION 
 # ALL, MON, TUE, WED, THU, FRI, SAT, SUN
 DAYS ALL
 TIME START 22:00:00
 TIME END 07:00:00
!
SCHEDULE SCH_RESET_MIN_MAX_COUNTERS
 TYPE SCH_ONE_SHOT
 DISPLAY Reset Min and Max Daily Counters
 DESCRIPTION 
 # ALL, MON, TUE, WED, THU, FRI, SAT, SUN
 DAYS ALL
 TIME START 18:00:00
!
SCHEDULE SCH_WATERING_TOP_SCHEDULE
 TYPE SCH_START_DURATION_REPEAT
 DISPLAY Watering Schedule Top Sprinklers
 DESCRIPTION 
 # ALL, MON, TUE, WED, THU, FRI, SAT, SUN
 DAYS ALL
 TIME START 00:00:00
 TIME DURATION 00:00:26
 TIME REPEAT 00:45:00
!
SCHEDULE SCH_WATERING_BOTTOM_SCHEDULE
 TYPE SCH_START_DURATION_REPEAT
 DISPLAY Watering Schedule Bottom Sprinklers
 DESCRIPTION 
 # ALL, MON, TUE, WED, THU, FRI, SAT, SUN
 DAYS ALL
 TIME START 00:00:30
 TIME DURATION 00:00:26
 TIME REPEAT 00:45:00
!
#################################################
# RULES
#################################################
!
RULE RL_RESET_MINMAX_ON_SCHEDULE
 TYPE RL_LOGIC_SINGLE
 DISPLAY Reset MinMax
 DESCRIPTION
 PARAM1 SCH_RESET_MIN_MAX_COUNTERS
 #NOT
 DISABLE 
!
RULE RL_TURN_ON_WATER_HEAT_IF_INSIDE_COLD
 TYPE RL_LOGIC_SINGLENOT
 DISPLAY Water Heat Warming Inside
 DESCRIPTION
 PARAM1 MON_INSIDE_TOP_TOO_COLD
 # PARAM2
 NOT SCH_EXCLUDE_WATER_HEAT_BY_DAY
 ENABLE 
!
RULE RL_RUN_LIGHTS_ON_SCHEDULE
 TYPE RL_LOGIC_SINGLE
 DISPLAY Light Schedule
 DESCRIPTION
 PARAM1 SCH_RUN_LIGHTS_AT_NIGHT
 #NOT 
 ENABLE 
!
RULE RL_FAN_IF_INSIDE_BOTTOM_HOT_OUTSIDE_COLD
 TYPE RL_LOGIC_AND
 DISPLAY Cooling Fan
 DESCRIPTION
 PARAM1 MON_INSIDE_BOTTOM_TOO_HOT
 PARAM2 MON_OUTSIDE_COLD
 #NOT 
 ENABLE 
!
RULE RL_CIRCULATE_IF_TOP_HOT_AND_BOTTOM_COLD
 TYPE RL_LOGIC_ANDNOT
 DISPLAY Circualtion Fan
 DESCRIPTION
 PARAM1 MON_INSIDE_TOP_TOO_HOT
 PARAM2 MON_INSIDE_BOTTOM_TOO_COLD
 #prevent if cold air being sucked in already
 NOT RL_FAN_IF_INSIDE_BOTTOM_HOT_OUTSIDE_COLD   
 ENABLE 
!
RULE RL_WATER_ON_SCHEDULE_TOP
 TYPE RL_LOGIC_SINGLE
 DISPLAY Water Cycle Top
 DESCRIPTION
 PARAM1 SCH_WATERING_TOP_SCHEDULE
 #NOT RL_SUSPEND_WATERING_IF_BOTH_DOORS_OPEN
 ENABLE 
!
RULE RL_WATER_ON_SCHEDULE_BOTTOM]
 TYPE RL_LOGIC_SINGLE
 DISPLAY Water Cycle Bottom
 DESCRIPTION
 PARAM1 SCH_WATERING_BOTTOM_SCHEDULE
 #NOT RL_SUSPEND_WATERING_IF_BOTH_DOORS_OPEN
 ENABLE 
!
#################################################
# CONTROLLERS
#################################################
!
CONTROLLER CON_RESET_MINMAX
 TYPE CON_SYSTEM
 DISPLAY Reset Min Max
 DESCRIPTION 
 RULE RL_RESET_MINMAX_ON_SCHEDULE
 OUTPUT OUT_SYSTEM_INTERNAL
 COMMAND ACTIVATE CMD_OUTPUT_ON
 COMMAND DEACTIVATE CMD_OUTPUT_OFF
 DISABE
!
CONTROLLER CON_WATER_HEATER_CONTROLLER
 TYPE CON_ONOFF
 DISPLAY Water Heating Controller
 DESCRIPTION 
 RULE RL_TURN_ON_WATER_HEAT_IF_INSIDE_COLD
 OUTPUT OUT_WATER_HEATER
 COMMAND ACTIVATE CMD_OUTPUT_ON
 COMMAND DEACTIVATE CMD_OUTPUT_OFF
 ENABLE
!
CONTROLLER CON_END_LIGHTS_CONTROLLER
 TYPE CON_ONOFF
 DISPLAY End Lights Controller
 DESCRIPTION 
 RULE RL_RUN_LIGHTS_ON_SCHEDULE
 OUTPUT OUT_END_LIGHTS
 COMMAND ACTIVATE CMD_OUTPUT_ON
 COMMAND DEACTIVATE CMD_OUTPUT_OFF
 ENABLE
!
CONTROLLER CON_FRESH_AIR_CONTROLLER
 TYPE CON_ONOFF
 DISPLAY Fresh Air Controller
 DESCRIPTION 
 RULE RL_FAN_IF_INSIDE_BOTTOM_HOT_OUTSIDE_COLD
 OUTPUT OUT_FRESH_AIR_FAN
 COMMAND ACTIVATE CMD_OUTPUT_ON
 COMMAND DEACTIVATE CMD_OUTPUT_OFF
 ENABLE
!
CONTROLLER CON_CIRCULATION_FAN_CONTROLLER
 TYPE CON_ONOFF
 DISPLAY Circulation Fan Controller
 DESCRIPTION 
 RULE RL_CIRCULATE_IF_TOP_HOT_AND_BOTTOM_COLD
 OUTPUT OUT_CIRCULATION_FAN
 COMMAND ACTIVATE CMD_OUTPUT_ON
 COMMAND DEACTIVATE CMD_OUTPUT_OFF
 ENABLE
!
CONTROLLER CON_EXHAUST_FAN_CONTROLLER
 TYPE CON_ONOFF
 DISPLAY Exhaust Fan Controller
 DESCRIPTION 
 RULE RL_FAN_IF_INSIDE_BOTTOM_HOT_OUTSIDE_COLD
 OUTPUT OUT_EXHAUST_FAN
 COMMAND ACTIVATE CMD_OUTPUT_ON
 COMMAND DEACTIVATE CMD_OUTPUT_OFF
 ENABLE
!
CONTROLLER CON_WATERING_TOP_CONTROLLER
 TYPE CON_ONOFF
 DISPLAY Top Sprinklers Solenoid Controller
 DESCRIPTION 
 RULE RL_WATER_ON_SCHEDULE_TOP
 OUTPUT OUT_WATERING_SOLENOID_TOP
 COMMAND ACTIVATE CMD_OUTPUT_ON
 COMMAND DEACTIVATE CMD_OUTPUT_OFF
 ENABLE
!
CONTROLLER CON_WATERING_BOTTOM_CONTROLLER
 TYPE CON_ONOFF
 DISPLAY Bottom Sprinklers Solenoid Controller
 DESCRIPTION 
 RULE RL_WATER_ON_SCHEDULE_BOTTOM
 OUTPUT OUT_WATERING_SOLENOID_BOTTOM
 COMMAND ACTIVATE CMD_OUTPUT_ON
 COMMAND DEACTIVATE CMD_OUTPUT_OFF
!
#################################################
# OUTPUTS
#################################################
!
OUTPUT OUT_END_LIGHTS
 TYPE OUT_DIGITAL
 DISPLAY Fluro Lights
 DESCRIPTION Relay to Control Fluro End Lights
 HARDWARE INTERFACE DIGITAL0
!
OUTPUT OUT_WATER_HEATER
 TYPE OUT_DIGITAL
 DISPLAY Header Tank Heater
 DESCRIPTION Relay to Control Header Tank Water Heater
 HARDWARE INTERFACE DIGITAL1
!
OUTPUT OUT_FRESH_AIR_FAN
 TYPE OUT_DIGITAL
 DISPLAY Fresh Air Fan
 DESCRIPTION Relay to Control Fresh Air Fan
 HARDWARE INTERFACE DIGITAL2
!
OUTPUT OUT_CIRCULATION_FAN
 TYPE OUT_DIGITAL
 DISPLAY Circulation Fan
 DESCRIPTION Relay to Control the Circulation Fan
 HARDWARE INTERFACE DIGITAL3
!
OUTPUT OUT_EXHAUST_FAN
 TYPE OUT_DIGITAL
 DISPLAY Exhaust Fan
 DESCRIPTION Relay to Control the Exhaust Fan
 HARDWARE INTERFACE DIGITAL4
!
OUTPUT OUT_WATERING_SOLENOID_TOP
 TYPE OUT_DIGITAL
 DISPLAY Water Value Top
 DESCRIPTION Relay to Control the Top Watering Solenoid
 HARDWARE INTERFACE DIGITAL6
!
OUTPUT OUT_WATERING_SOLENOID_BOTTOM
 TYPE OUT_DIGITAL
 DISPLAY Water Value Bottom
 DESCRIPTION Relay to Control the Bottom Watering Solenoid
 HARDWARE INTERFACE DIGITAL7
!
!
