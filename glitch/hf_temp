//
// DO NOT MODIFY THIS FILE
//
// THIS FILE IS AUTOMATICALLY GENERATED IN ITS ENTIRETY
// ANY CHANGES MADE IN THIS FILE WILL BE OVERWRITTEN WITHOUT WARNING
// WHENEVER THE GLITCH IS INVOKED.
//

#ifndef OUT_H_
#define OUT_H_

#define MAX_ENUM_STRING_ARRAY_STRING_SIZE 18
#define MAX_IDENTIFIER_LABEL_SIZE 24
#define MAX_AST_LABEL_SIZE 16
#define MAX_AST_ACTION_SIZE 24
#define AST_NODE_COUNT 18
#define MAX_PARAM_COUNT 2

#define XLAT_IDENT_MAP_COUNT 2
#define XLAT_LOOKUP_MAP_COUNT 1
#define XLAT_FUNC_MAP_COUNT 11

#define MAX_INPUT_LINE_SIZE 80
#define MAX_OUTPUT_LINE_SIZE 150

#define MAX_BUFFER_SIZE MAX_OUTPUT_LINE_SIZE
#define MAX_BUFFER_LENGTH MAX_OUTPUT_LINE_SIZE

#ifdef ARDUINO
#include <Arduino.h>
#define USE_PROGMEM
#endif

//#define DEBUG

#include "common_config.h"
#include <stdint.h>
#include <string.h>
#include <ff_string_consts.h>

//
// Structs used by the parser 
// 

#ifdef USE_PROGMEM
typedef struct SIMPLE_STRING_ARRAY_TYPE {
    // Array of strings (usually labels and messages) relating to enums
    // Inside this struct, extended intitaliser lists are ok
    char text[MAX_MESSAGE_STRING_LENGTH];
} SimpleStringArray;

#else

typedef struct SIMPLE_STRING_ARRAY_TYPE {
    // Array of strings (usually labels and messages) relating to enums
    // Inside this struct, extended intitaliser lists are ok
    const char* text;
} SimpleStringArray;
#endif

typedef struct AST_ARRAY {
    uint16_t id;
    int type;
    char label[MAX_AST_LABEL_SIZE];
    bool action;
    uint16_t parent;
    uint16_t first_child;
    uint16_t next_sibling;
    char action_identifier[MAX_AST_ACTION_SIZE];
} ASTA;

typedef struct XLAT_MAP {
	char label[MAX_IDENTIFIER_LABEL_SIZE];
	uint16_t xlat_id;
} XLATMap;

typedef union {
	int16_t param_int16_t;
	uint16_t param_uint16_t;
	float param_float;
	char* param_char_star;
} ParamUnion;



#define ITCH_ESCAPE_SEQUENCE "^^^"
#define ITCH_ESCAPE_SEQUENCE_SIZE 3

enum {
	FF_ERROR_CAT = 0,
	FF_GENERIC_BLOCK,
	FF_SYSTEM,
	FF_INPUT,
	FF_MONITOR,
	FF_SCHEDULE,
	FF_RULE,
	FF_CONTROLLER,
	FF_OUTPUT,
	LAST_BLOCK_CAT,
};

#ifdef USE_PROGMEM
static const SimpleStringArray block_cat_names [LAST_BLOCK_CAT] PROGMEM = {
#else
static const SimpleStringArray block_cat_names [LAST_BLOCK_CAT] = {
#endif
	"ERROR_CAT",
	"GENERIC",
	"SYSTEM",
	"INPUT",
	"MONITOR",
	"SCHEDULE",
	"RULE",
	"CONROLLER",
	"OUTPUT",
};

enum {
	CMD_ERROR = 0,
	CMD_OUTPUT_OFF,
	CMD_OUTPUT_ON,
	CMD_RESET_MIN_MAX,
	LAST_COMMAND,
};

#ifdef USE_PROGMEM
static const SimpleStringArray command_strings [LAST_COMMAND] PROGMEM = {
#else
static const SimpleStringArray command_strings [LAST_COMMAND] = {
#endif
	"CMD_ERROR",
	"CMD_OUTPUT_OFF",
	"CMD_OUTPUT_ON",
	"CMD_RESET_MIN_MAX",
};

void ShowBlocks(void);
void ShowSystem(void);
void ShowBlockByLabel(char* block_label);
void ShowBlockByID(int16_t param1_int);
void SendCommandToBlockLabel(char* block_label, uint16_t command);
void SendCommandToBlockID(int16_t param1_int, uint16_t command);
void ShowTime(void);
void SetTime(char* param1_time);
void ShowDate(void);
void SetDate(char* param1_date);
void SystemReboot(void);

#ifdef USE_PROGMEM
static const ASTA asta [18] PROGMEM = {
#else
static const ASTA asta [18] = {
#endif
	1, 1, "SHOW", 0, 0, 2, 6, "",
	2, 1, "BLOCKS", 1, 1, 0, 3, "SHOW_BLOCKS",
	3, 1, "SYSTEM", 1, 1, 0, 4, "SHOW_SYSTEM",
	4, 3, "block_label", 1, 1, 0, 5, "SHOW_BLOCK_LABEL",
	5, 6, "param-integer", 1, 1, 0, 0, "SHOW_BLOCK_ID",
	6, 1, "MESSAGE", 0, 0, 7, 12, "",
	7, 1, "COMMAND", 0, 6, 8, 0, "",
	8, 3, "block_label", 0, 7, 9, 10, "",
	9, 2, "command_strings", 1, 8, 0, 0, "COMMAND_BLOCK_LABEL",
	10, 6, "param-integer", 0, 7, 11, 0, "",
	11, 2, "command_strings", 1, 10, 0, 0, "COMMAND_BLOCK_ID",
	12, 1, "TIME", 1, 0, 13, 15, "SHOW_TIME",
	13, 1, "SET", 0, 12, 14, 0, "",
	14, 5, "param-time", 1, 13, 0, 0, "SET_TIME",
	15, 1, "DATE", 1, 0, 16, 18, "SHOW_DATE",
	16, 1, "SET", 0, 15, 17, 0, "",
	17, 4, "param-date", 1, 16, 0, 0, "SET_DATE",
	18, 1, "REBOOT", 1, 0, 0, 0, "REBOOT",
};

#ifdef USE_PROGMEM
static const XLATMap ident_map [2] PROGMEM = {
#else
static const XLATMap ident_map [2] = {
#endif
	"block_cat_names", 0,
	"command_strings", 1,
};

#ifdef USE_PROGMEM
static const XLATMap lookup_map [1] PROGMEM = {
#else
static const XLATMap lookup_map [1] = {
#endif
	"block_label", 0,
};

#ifdef USE_PROGMEM
static const XLATMap func_map [11] PROGMEM = {
#else
static const XLATMap func_map [11] = {
#endif
	"SHOW_BLOCKS", 0,
	"SHOW_SYSTEM", 1,
	"SHOW_BLOCK_LABEL", 2,
	"SHOW_BLOCK_ID", 3,
	"COMMAND_BLOCK_LABEL", 4,
	"COMMAND_BLOCK_ID", 5,
	"SHOW_TIME", 6,
	"SET_TIME", 7,
	"SHOW_DATE", 8,
	"SET_DATE", 9,
	"REBOOT", 10,
};

uint16_t LookupIdentMap (char* key);
uint16_t LookupLookupMap (char* key);
uint16_t LookupFuncMap (char* key);
uint16_t LookupIdentifierMembers(uint16_t ident_xlat, char* lookup_string);
uint8_t LookupLookupMembers(uint16_t ident_xlat, char* lookup_string);
uint8_t LookupBlockLabel(char* lookup_string);
uint16_t CallFunction(uint8_t func_xlat, ParamUnion params[]);

#endif // OUT_H_

