//
// DO NOT MODIFY THIS FILE
//
// THIS FILE IS AUTOMATICALLY GENERATED IN ITS ENTIRETY
// ANY CHANGES MADE IN THIS FILE WILL BE OVERWRITTEN WITHOUT WARNING
// WHENEVER THE LEXER / PROCESSOR IS INVOKED.
//

#include "out.h"	

//TODO: Command Line Options Processing
//TODO: AST Validation Walk - 
//TODO: AST Flag end points
//TODO: AST Order Ambiguity Report
//TODO: AST Determine Partial Keyword Uniqueness
//TODO: AST Warn unused IDs, lookups, params
//TODO: Parser/AST output Action prototypes
//TODO: Configuration Grammar with %section directive
//TODO: Context change on <identifier> value

uint16_t LookupIdentMap (char* key) {
	uint16_t count;
	uint16_t idx = 0;
	count = sizeof(ident_map) / sizeof(XLATMap);
	while (idx < count) {
		if(strcasecmp(ident_map[idx].label, key) == 0) {
			return ident_map[idx].xlat_id;
		}
		idx++;
	}
	return -1;
}

uint16_t LookupLookupMap (char* key) {
	uint16_t count;
	uint16_t idx = 0;
	count = sizeof(lookup_map) / sizeof(XLATMap);
	while (idx < count) {
		if(strcasecmp(lookup_map[idx].label, key) == 0) {
			return lookup_map[idx].xlat_id;
		}
		idx++;
	}
	return -1;
}

uint16_t LookupFuncMap (char* key) {
	uint16_t count;
	uint16_t idx = 0;
	count = sizeof(func_map) / sizeof(XLATMap);
	while (idx < count) {
		if(strcasecmp(func_map[idx].label, key) == 0) {
			return func_map[idx].xlat_id;
		}
		idx++;
	}
	return -1;
}

uint16_t LookupIdentifierMembers(uint16_t ident_xlat, char* lookup_string) {
	uint16_t count;
	uint16_t idx = 0;
	switch(ident_xlat) {
		case 0: {
			count = sizeof(block_cat_defs) / sizeof(SimpleStringArray);
			while (idx < count) {
				if(strcasecmp(block_cat_defs[idx].text, lookup_string) == 0) {
					return idx;
				}
				idx++;
			}
		}
			break;
		case 1: {
			count = sizeof(command_strings) / sizeof(SimpleStringArray);
			while (idx < count) {
				if(strcasecmp(command_strings[idx].text, lookup_string) == 0) {
					return idx;
				}
				idx++;
			}
		}
			break;
		default:
		return 0;
	}
	return 0;
}

